NAME: devops-chart
LAST DEPLOYED: Mon Jun 28 16:34:25 2021
NAMESPACE: polo
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
global:
  namespace: polo
mongo:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  global:
    namespace: polo
  image:
    name: mongo
    tag: 4.4.0
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nodeSelector: {}
  replicaCount: 1
  resources:
    cpu: 1
    memory: 300Mi
  service:
    port: 27017
    type: ClusterIP
  terminationGracePeriodSeconds: 10
  tolerations: []
  volume:
    accessMode: ReadWriteOnce
    storageRequest: 1Gi
    volumeMode: standard
secrets:
  mongo:
    AUTH_PART_MONGO: YWRtaW4=
    MONGO_INITDB_DATABASE: dXBsb2FkZXI=
    MONGO_INITDB_ROOT_PASSWORD: YWljMVV5b2g0dnVhMWll
    MONGO_INITDB_ROOT_USERNAME: cm9vdA==
uploader-app:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  global:
    namespace: polo
  image:
    name: uploader-app
    registry: paulb314
    tag: latest
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: uploader-app.polo.localhost
      paths:
      - path: /
        pathType: Prefix
        port: 3000
    tls: []
  ingress-nginx:
    controller:
      addHeaders: {}
      admissionWebhooks:
        annotations: {}
        certificate: /usr/local/certificates/cert
        enabled: true
        existingPsp: ""
        failurePolicy: Fail
        key: /usr/local/certificates/key
        namespaceSelector: {}
        objectSelector: {}
        patch:
          enabled: true
          image:
            image: jettech/kube-webhook-certgen
            pullPolicy: IfNotPresent
            registry: docker.io
            tag: v1.5.1
          nodeSelector: {}
          podAnnotations: {}
          priorityClassName: ""
          runAsUser: 2000
          tolerations: []
        port: 8443
        service:
          annotations: {}
          externalIPs: []
          loadBalancerSourceRanges: []
          servicePort: 443
          type: ClusterIP
      affinity: {}
      annotations: {}
      autoscaling:
        enabled: false
        maxReplicas: 11
        minReplicas: 1
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
      autoscalingTemplate: []
      config: {}
      configAnnotations: {}
      configMapNamespace: ""
      containerName: controller
      containerPort:
        http: 80
        https: 443
      customTemplate:
        configMapKey: ""
        configMapName: ""
      dnsConfig: {}
      dnsPolicy: ClusterFirst
      electionID: ingress-controller-leader
      enableMimalloc: true
      existingPsp: ""
      extraArgs: {}
      extraContainers: []
      extraEnvs: []
      extraInitContainers: []
      extraVolumeMounts: []
      extraVolumes: []
      healthCheckPath: /healthz
      hostNetwork: false
      hostPort:
        enabled: false
        ports:
          http: 80
          https: 443
      image:
        allowPrivilegeEscalation: true
        digest: sha256:a1e4efc107be0bb78f32eaec37bef17d7a0c81bec8066cdf2572508d21351d0b
        image: ingress-nginx/controller
        pullPolicy: IfNotPresent
        registry: k8s.gcr.io
        runAsUser: 101
        tag: v0.47.0
      ingressClass: nginx
      ingressClassResource:
        default: false
        enabled: false
        parameters: {}
      keda:
        apiVersion: keda.sh/v1alpha1
        behavior: {}
        cooldownPeriod: 300
        enabled: false
        maxReplicas: 11
        minReplicas: 1
        pollingInterval: 30
        restoreToOriginalReplicaCount: false
        scaledObject:
          annotations: {}
        triggers: []
      kind: Deployment
      labels: {}
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      maxmindLicenseKey: ""
      metrics:
        enabled: false
        port: 10254
        prometheusRule:
          additionalLabels: {}
          enabled: false
          rules: []
        service:
          annotations: {}
          externalIPs: []
          loadBalancerSourceRanges: []
          servicePort: 10254
          type: ClusterIP
        serviceMonitor:
          additionalLabels: {}
          enabled: false
          metricRelabelings: []
          namespace: ""
          namespaceSelector: {}
          scrapeInterval: 30s
          targetLabels: []
      minAvailable: 1
      minReadySeconds: 0
      name: controller
      nodeSelector:
        kubernetes.io/os: linux
      podAnnotations: {}
      podLabels: {}
      podSecurityContext: {}
      priorityClassName: ""
      proxySetHeaders: {}
      publishService:
        enabled: true
        pathOverride: ""
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      replicaCount: 1
      reportNodeInternalIp: false
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      scope:
        enabled: false
        namespace: ""
      service:
        annotations: {}
        enableHttp: true
        enableHttps: true
        enabled: true
        externalIPs: []
        internal:
          annotations: {}
          enabled: false
          loadBalancerSourceRanges: []
        labels: {}
        loadBalancerSourceRanges: []
        nodePorts:
          http: ""
          https: ""
          tcp: {}
          udp: {}
        ports:
          http: 80
          https: 443
        targetPorts:
          http: http
          https: https
        type: LoadBalancer
      sysctls: {}
      tcp:
        annotations: {}
        configMapNamespace: ""
      terminationGracePeriodSeconds: 300
      tolerations: []
      topologySpreadConstraints: []
      udp:
        annotations: {}
        configMapNamespace: ""
      updateStrategy: {}
    defaultBackend:
      affinity: {}
      autoscaling:
        annotations: {}
        enabled: false
        maxReplicas: 2
        minReplicas: 1
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
      enabled: false
      existingPsp: ""
      extraArgs: {}
      extraEnvs: []
      extraVolumeMounts: []
      extraVolumes: []
      image:
        allowPrivilegeEscalation: false
        image: defaultbackend-amd64
        pullPolicy: IfNotPresent
        readOnlyRootFilesystem: true
        registry: k8s.gcr.io
        runAsNonRoot: true
        runAsUser: 65534
        tag: "1.5"
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      minAvailable: 1
      name: defaultbackend
      nodeSelector: {}
      podAnnotations: {}
      podLabels: {}
      podSecurityContext: {}
      port: 8080
      priorityClassName: ""
      readinessProbe:
        failureThreshold: 6
        initialDelaySeconds: 0
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        externalIPs: []
        loadBalancerSourceRanges: []
        servicePort: 80
        type: ClusterIP
      serviceAccount:
        automountServiceAccountToken: true
        create: true
        name: ""
      tolerations: []
    dhParam: null
    global:
      namespace: polo
    imagePullSecrets: []
    podSecurityPolicy:
      enabled: false
    rbac:
      create: true
      scope: false
    revisionHistoryLimit: 10
    serviceAccount:
      automountServiceAccountToken: true
      create: true
      name: ""
    tcp: {}
    udp: {}
  nodeSelector: {}
  replicaCount: 1
  resources:
    cpu: 0.5
    memory: 300Mi
  secrets:
    tls:
      tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZMVENDQXhXZ0F3SUJBZ0lVS0p2Q2lQNnQwMUJRQnAwQ0ZTa2FuNWVzTGVFd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0pqRWtNQ0lHQTFVRUF3d2JkWEJzYjJGa1pYSXRZWEJ3TG5CdmJHOHViRzlqWVd4b2IzTjBNQjRYRFRJeApNRFl5TkRBNU16Z3dNMW9YRFRJeU1EWXlOREE1TXpnd00xb3dKakVrTUNJR0ExVUVBd3diZFhCc2IyRmtaWEl0CllYQndMbkJ2Ykc4dWJHOWpZV3hvYjNOME1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0MKQWdFQTJjMXdQY3dHSjlnTkY4NXRsaDNOVXYxUDBabE9QNW5MNDlpRGxrNDEvNWZwODFYWk9ySmkwcmhPT0FpaQo2MU1ZYjdNOERnRi9lNmlyZk9COTRuU3JWS004TitkZzN3TU12RUlRWmpuQktXNEk3a2Jra2IvSjgrUTRoYklFCjJjZ0ZjOWVLTDJzNGNzZkpGNVY4VW0xenV2U1hBMTFXenZxSUc4UGtUZDZ0dkU1S2VWWEhURWl6dVg4Vlk0RDQKaWxOaWJHSVZoOFZHaEV2Smd5N3Y1ZVMwb0dIbE9MUGJKT0xVMndlK3NCUmp4OHlWcU40V0d1SWR4QzFja0p1NApNMU4ycFZoMjI1a1F0Z2RZYUY1ejUwNWpJU1dUU2NsSnYweDltMHZQN25OeEllTkNydlNoU2VMdGY3ZlpCcC82Cmp4K1kyT3VaS2VVUERKY2oxWGFsUXJNSmk2SmlGQzhBUnV5WG9zUmRqZ3lWSVRDVUNGVFNHVE5sNTJ2R1hJZGUKM1RCS001UitQKzd6bGpNWllWOUtMMkZtMWpIa2tUd1lQdW5CaUhZYjhHYTVybUsrMnE1c2JpcFBUZTVUczFwYwpPbUlzR3RSUXNFSFM0QlVRODVMdUI0WnBIUmVMbTdYb3hHZVJaT2RudW1jNTdtUDY3ZWJXWG1JMjVHMVh1am1iCkpYUkdQTHVZcEJLU083NCtNMWFsVFozWHNmT2Jna2RaN0MrZTJjVXBqNmEwRnhVbElrWm02aEEzdlNlZHR4LzUKTmMxM043MGRhcStCcGFWSHpaOWlOMGVnbGZuaXczMk1MRkxoT3JwbWR4bTlMMWRMenZuMlNwUmxHWlR2VmxzRwpBZmx6Szk2bTd0cDRuNXgxZ0w3VnVWS0VkWGF1cTR2N2JhSUs3VCtJNFlxem9MTUNBd0VBQWFOVE1GRXdIUVlEClZSME9CQllFRkhLZU5lRzV6TDdtZVJLOXZ5cjB6a3R6Mkh1c01COEdBMVVkSXdRWU1CYUFGSEtlTmVHNXpMN20KZVJLOXZ5cjB6a3R6Mkh1c01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQgpBSm1teHZKaTU2TTE0N0pMSWJ6WEl3eEp0bHJ4WDJ6cFJUTEdXN3lXdnNPMHFIR1AyczU3eWNkcm8wUEdVbWk3CjBhTU5Ub05nZXBZdHAvY3BadXNhbnZnWUxSeGk3OW9LbVlEajNXTURQOThwV3BmV1pVWG9TaXlsNXRRSWNXRnUKQ2F1ZnVwbUYvR3loS1hGdGlHQWZNV0ZsUlY0ZloyNnA5NFNOUVJMTEFLWThJU3RjeHdSeXhiMU91M0ZHT21ZbApRRzRMcVRxd1hwTWFhUHRuRkJhL0EvakFoT1lwNjM1Mkd6a1VPcHAyTTBpWVlZUm8zVXFLZUpIOTFjODZmZFBlCjQzUEp5cjNpSVFJaW9kRTVnaGhmaVV4a3ZDNWZsVnIvZXNBQ2JGMURSSkJoMHh6eGplQkg0bzdRNWZrSUJaeVQKK21uc3R5enp3NURpQ1FWSVJ2dkNYdysrcG4zbEExUis5NFhmbW1JMFZCcThtMmxmbUxqT1RydUVCUjBUL2lRTgpWM00zc3dxTUFGYVRLRnFpQi8zZXo5MEk5YUpleWNUdlFIK2VGQ2l1emdMenhjWll5MDhrSkMydC9qVVBmQ0xwCjZHTG9RSDlRNFM5dmJGSHJHaUxiYUd4bStDYzcxckpUQWJjVDFNVFdMSUdjc0xXQ05OTmJlZVlvS25yaGdkNDkKaXBvZjVlQlVFeEtBUHFmVzE5VVYvVmRXWFZwa2FWMnpEeFhwZzRxbHNlZjErak1jbGZGbVhOaXB4aEwvWG9wVgpwNm9Leklra1MvdnhjbUZLYlMvaGJ2Qzd3Y25UWmlvZ2dHRHUrT3o4Nk1qM3FCNXhCMTZsZVVmZGdPQVlORTdlCmQ5SklLNmpUYWs0bjV4ODZaZjkrQlRCNEcvdHBaZzRZaVN3Z0s4S2JOTlgzCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
      tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRRFp6WEE5ekFZbjJBMFgKem0yV0hjMVMvVS9SbVU0L21jdmoySU9XVGpYL2wrbnpWZGs2c21MU3VFNDRDS0xyVXhodnN6d09BWDk3cUt0OAo0SDNpZEt0VW96dzM1MkRmQXd5OFFoQm1PY0VwYmdqdVJ1U1J2OG56NURpRnNnVFp5QVZ6MTRvdmF6aHl4OGtYCmxYeFNiWE82OUpjRFhWYk8rb2didytSTjNxMjhUa3A1VmNkTVNMTzVmeFZqZ1BpS1UySnNZaFdIeFVhRVM4bUQKTHUvbDVMU2dZZVU0czlzazR0VGJCNzZ3RkdQSHpKV28zaFlhNGgzRUxWeVFtN2d6VTNhbFdIYmJtUkMyQjFobwpYblBuVG1NaEpaTkp5VW0vVEgyYlM4L3VjM0VoNDBLdTlLRko0dTEvdDlrR24vcVBINWpZNjVrcDVROE1seVBWCmRxVkNzd21Mb21JVUx3Qkc3SmVpeEYyT0RKVWhNSlFJVk5JWk0yWG5hOFpjaDE3ZE1Fb3psSDQvN3ZPV014bGgKWDBvdllXYldNZVNSUEJnKzZjR0lkaHZ3WnJtdVlyN2FybXh1S2s5TjdsT3pXbHc2WWl3YTFGQ3dRZExnRlJEegprdTRIaG1rZEY0dWJ0ZWpFWjVGazUyZTZaem51WS9ydDV0WmVZamJrYlZlNk9ac2xkRVk4dTVpa0VwSTd2ajR6ClZxVk5uZGV4ODV1Q1IxbnNMNTdaeFNtUHByUVhGU1VpUm1icUVEZTlKNTIzSC9rMXpYYzN2UjFxcjRHbHBVZk4KbjJJM1I2Q1YrZUxEZll3c1V1RTZ1bVozR2IwdlYwdk8rZlpLbEdVWmxPOVdXd1lCK1hNcjNxYnUybmlmbkhXQQp2dFc1VW9SMWRxNnJpL3R0b2dydFA0amhpck9nc3dJREFRQUJBb0lDQUdYSm9QOEFicEFJWkhZUHZ4ODg1a3cyCm5pcnlYcU5TbVBydW9QQ0p0S3F5c0Y5TWE2MEcyVEJwZWdTdDVKWGR5N25JSmZUVnRtSndQVlNyQmFuanBINTEKbXhyMVEweDEvR211NWtNZ0VxbnVCclowNHpWS1VITnU0UXQ2V3RIOHJLK3F0Nlhaa2hQeVVvUjNGQmJobUFoegpibS9nRzBXM3lBeFJ6RXlvR01HOFJRblhrTUNSNll4elcrZVl5bzY2MFhDZGxqcFJjOWM0SkFEdTJxYXg3OGhVCmQrKzcvbHFLdDdkMU15VFBJcUtwZGZmcGNxTTFzWHVSUjRVOWdTUmJpVU5VeUpkd1BXTVVvN2lEQzkrNXZwSXIKSVY2R2Q3U3packJCQ2ZnQ2M0akcwTTg2L0hXdlhCY29NSURzR3dqd1YxcHBJTGQzbVVUbERaWWhVTEtQUVpIbgpjdnV0ZzRrYTdpcmwwTFp6Zk9uc3dhWkNMNFZ3b1ZuVEVoSFVKL1M0eTRYUU1hMUVVekVJVVBJOEh0RWY0NVhuCnhKY3ZGQ1lqUS8xUDBlRTM0N0tWZ0hNblNPeWJaOHdjTjAxVHljSDk4NWovdEt0QlpySGVqWnY1WW93bDNCYlEKdCtFQXU5Qm95dVFYaHZRZGRUWUtSMjJ1TlZ3bnhDTVE3VTNnM3pIRTNzNStDbC85V0JTS0FzZjhuaTZjMXlEbwp2aXU2UW5VTXgwZ0V2eDIxQ0tYekV0WXAvYy9sM3lMcVVRQ2FBVlRNdzhhampCTFB0YUxtY3Qxc1FnUkxhZnQrCk9WYmJLMk5IaHRxS05HWU9KdTdEKzA5RzZTSUpVODVRL0o0UUcxSzFBYVhNNTVxRjR5NkFqUUVCQVlUeWx4a2oKSysrV01PeUlKaTE3YUwrVlo0RUJBb0lCQVFEMm1vUnc0bEJZNlBscFpWWS9jQUpVWXRDMndRRExzTVhDcUVNdwpSNVRwN2NlNFhSS0VNMFZVODRYbmdGOXdKTDcyQjREWFFBMW8zc2hXcDJHMXZ4c01GenNTajIyNW5uTVZWc3dJCktVeWFVWVlRQjFoQlE3cUl3WWJCelZGN3Y1OTRFN1RpR1R6QjZUTHloWWhIUUZLQ0hDbVI0WkxjbWJwMHA4cVAKQzBIejl6enFJVEhCS3ZKSEFBVmFzVlU3d2MyRmltdzRNaSsrdjlLWFByWW83Y3d5aW1EUGtpVERiaUpOV0dEYwppY1BxMkt4aEhYWmErRkl6T2xUV1Z3OVVYaWowNi9Vb29IZEZkVlA4UjFYVm5zYVJjK2ZncFpkc3JqczB6NUJPCm5aTWVZdnljMG5GbGVyY2UxeGF6QTVIRTFjTFd4cVJWcUNGYkR2R0xlVmliTWtSVEFvSUJBUURpR2Z0MkNvUTIKdmtzS0tnZ1hFbHBCNW9CdjJNdm9lRXVtUnRBOGJmZkxVdWVJV1lBbDZHeTQwZEZVSTdSV1VsTU5QSVo3MGFGWAo0T2drOGZVbWJFTVdraWRaMU9EWHcwZmZ2eEo5eFRnQllTalpiNW11ZjBXWnNDQi9LVXBxZXZxb1JiUWpHNlgzClZ6N082VURWQ2lFVjRXQUVqb2tscUU2YkNYc2g2Um02ei9VY3lQQzdkQzB5Y1VoZVF6OVdUV2tnNEdjeTJBbFkKSUs5SVZrakJzUkllRTNrOXNZeXFrNUhoWEFPT3JZcHcrV05ZWGNoTTE4NVFFY2txcklqbE1zbkRGOXpXYkZhMgpWOHBoMnFmeXU4WGNVNlZxd1hhRkM0Ny9jWWJBdkljeFNQOStLbXM1S2tWbmpvM0ZEZnZyLzNFY0NTdk4xM0FLCnlBd2pyU1lPQ2FZaEFvSUJBUUNycmF6UVRhMzBCOVZDKzZxTXBYVHB2SlZpOVlDUlRiS1Byc1ovd1FXNXliRUYKOTcyaFRYUlNET3RHM0ljVXNuQkRKYndibmxyM2pFbGFrbEtpemJXTnVFcUd4RlYyS1FvamEvYkZJOE5SbDduRwpST2E3SU9TbXVsd1BaZG41VmRFMkxqbjZRZW1iY2JiblFmRTY4VnUvZXMyeDRxRjBkSTFyRXprZ1ZvMEd4RE9qCko1TFUwUW8wUlo1MG9nb2RmUEdRcTJwbHdRS2VRRHJpMG1UTW42aE44eW9zdDZoaWFiVDF0YlpSTXBPelZqN0QKcVZneFFya3ZNc2ZISkhybW1GclpENy93RmE2VEszaFpwR3ZzT1FveVRzZTZERzRiMmp3YnF2amkwaTZPdEFqNwpRRUp6akhnWnYxSHROR254NTRNcU5NWkpYN0JCRFdrNVdUUkhienBEQW9JQkFEblRQVTJXS1BRN1BNUFB0aHY0CmRKN3dEWjhOU2pFZE92TytucGtsNHI3Y2FCeW1EekVpdlZPVFRiOEFGcW9SQ2U2VHNTMVBrcnovNXo4enBtZjYKUGpveWpOL2JvdGxydHlFUkkvQ0lsT2M5YXc0WkRhdmtIdS9NYkxNNDR6QlNYWExWeU5sRncrOTdIN1FaVVp4cQpwOFdKeTEyKytuSm9GaHB1bFZBNTVudXhuZFdMeW8yV2k4eWZ6a3RWVllpRDZjUWZ3Q1R2dll3TlorYlBNbkpmCkQrd2pQTm03WStkb01HSDdmMmxwRnNRSDlCRndncjZzWHJaNXBnSkUrQW51TUUyMTk2UGJOMTRSRzlCazlKa08KenU2bmNlSFlzckFhSWF0UTVJNjhhTE1CSVY2cUNKd3BKSEQwczJ0WFJUdTVLN3RvMlF3ZThpZS91K01QOEhDYwpwU0VDZ2dFQWZac3l6Y25ZTXhZamlKVGNLejFkbExhZUFYVXlDY2NyVmtoMzJERDlWeWZJSDlBT2lKRVBOV3FvCml6MnZ2Q2FtTzVsVjQ1ZGtBdjRJNkJPeHBWZVllaDNZWnZXbmpweCtjUWxxUG1uQW5VMm9ST2hxbXR0RkNCbHIKNmRhNjRsSW12VEpobGdIWW1IWWxHSnNTWlRubXR2UlhOUTVadkprMkJVYzNzVHBTSjc5YnVaeUdJeTBJYjdybQovYXhVb2l2M2ZSKzlVbzJ1eG5xSnc4dmEzRTJlRFRsVFpLOEMxMDllekhTRkZ2ZHVEdzhZN3FoMlRhVFBnUzhhCmsxbHUzTWdIb2laRnF3NXVldHdORlV4Vk9jTnFFZ0M3VlEvN3ljZkJBRzF4S0ErLzV1RzhvZTNKcTNiNVVHTFUKNXBtMHNVay9yTlFiMU4xNkltMWNUUDk0N2xQSEZBPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
  service:
    port: 3000
    type: ClusterIP
  terminationGracePeriodSeconds: 10
  tolerations: []
  volume:
    accessMode: ReadWriteOnce
    storageRequest: 5Gi
    volumeMode: standard

HOOKS:
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: devops-chart-ingress-nginx-admission
  namespace: polo
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: devops-chart-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  devops-chart-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: devops-chart-ingress-nginx-admission
subjects:
  - kind: ServiceAccount
    name: devops-chart-ingress-nginx-admission
    namespace: "polo"
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  devops-chart-ingress-nginx-admission
  namespace: polo
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: devops-chart-ingress-nginx-admission
  namespace: polo
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: devops-chart-ingress-nginx-admission
subjects:
  - kind: ServiceAccount
    name: devops-chart-ingress-nginx-admission
    namespace: "polo"
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: devops-chart-ingress-nginx-admission-create
  namespace: polo
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: devops-chart-ingress-nginx-admission-create
      labels:
        helm.sh/chart: ingress-nginx-3.34.0
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: devops-chart
        app.kubernetes.io/version: "0.47.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: create
          image: "docker.io/jettech/kube-webhook-certgen:v1.5.1"
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=devops-chart-ingress-nginx-controller-admission,devops-chart-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
            - --namespace=$(POD_NAMESPACE)
            - --secret-name=devops-chart-ingress-nginx-admission
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      restartPolicy: OnFailure
      serviceAccountName: devops-chart-ingress-nginx-admission
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: devops-chart-ingress-nginx-admission-patch
  namespace: polo
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: devops-chart-ingress-nginx-admission-patch
      labels:
        helm.sh/chart: ingress-nginx-3.34.0
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: devops-chart
        app.kubernetes.io/version: "0.47.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: patch
          image: "docker.io/jettech/kube-webhook-certgen:v1.5.1"
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=devops-chart-ingress-nginx-admission
            - --namespace=$(POD_NAMESPACE)
            - --patch-mutating=false
            - --secret-name=devops-chart-ingress-nginx-admission
            - --patch-failure-policy=Fail
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      restartPolicy: OnFailure
      serviceAccountName: devops-chart-ingress-nginx-admission
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
MANIFEST:
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: devops-chart-ingress-nginx
  namespace: polo
automountServiceAccountToken: true
---
# Source: devops-test/charts/uploader-app/templates/secrets.yaml
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZMVENDQXhXZ0F3SUJBZ0lVS0p2Q2lQNnQwMUJRQnAwQ0ZTa2FuNWVzTGVFd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0pqRWtNQ0lHQTFVRUF3d2JkWEJzYjJGa1pYSXRZWEJ3TG5CdmJHOHViRzlqWVd4b2IzTjBNQjRYRFRJeApNRFl5TkRBNU16Z3dNMW9YRFRJeU1EWXlOREE1TXpnd00xb3dKakVrTUNJR0ExVUVBd3diZFhCc2IyRmtaWEl0CllYQndMbkJ2Ykc4dWJHOWpZV3hvYjNOME1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0MKQWdFQTJjMXdQY3dHSjlnTkY4NXRsaDNOVXYxUDBabE9QNW5MNDlpRGxrNDEvNWZwODFYWk9ySmkwcmhPT0FpaQo2MU1ZYjdNOERnRi9lNmlyZk9COTRuU3JWS004TitkZzN3TU12RUlRWmpuQktXNEk3a2Jra2IvSjgrUTRoYklFCjJjZ0ZjOWVLTDJzNGNzZkpGNVY4VW0xenV2U1hBMTFXenZxSUc4UGtUZDZ0dkU1S2VWWEhURWl6dVg4Vlk0RDQKaWxOaWJHSVZoOFZHaEV2Smd5N3Y1ZVMwb0dIbE9MUGJKT0xVMndlK3NCUmp4OHlWcU40V0d1SWR4QzFja0p1NApNMU4ycFZoMjI1a1F0Z2RZYUY1ejUwNWpJU1dUU2NsSnYweDltMHZQN25OeEllTkNydlNoU2VMdGY3ZlpCcC82Cmp4K1kyT3VaS2VVUERKY2oxWGFsUXJNSmk2SmlGQzhBUnV5WG9zUmRqZ3lWSVRDVUNGVFNHVE5sNTJ2R1hJZGUKM1RCS001UitQKzd6bGpNWllWOUtMMkZtMWpIa2tUd1lQdW5CaUhZYjhHYTVybUsrMnE1c2JpcFBUZTVUczFwYwpPbUlzR3RSUXNFSFM0QlVRODVMdUI0WnBIUmVMbTdYb3hHZVJaT2RudW1jNTdtUDY3ZWJXWG1JMjVHMVh1am1iCkpYUkdQTHVZcEJLU083NCtNMWFsVFozWHNmT2Jna2RaN0MrZTJjVXBqNmEwRnhVbElrWm02aEEzdlNlZHR4LzUKTmMxM043MGRhcStCcGFWSHpaOWlOMGVnbGZuaXczMk1MRkxoT3JwbWR4bTlMMWRMenZuMlNwUmxHWlR2VmxzRwpBZmx6Szk2bTd0cDRuNXgxZ0w3VnVWS0VkWGF1cTR2N2JhSUs3VCtJNFlxem9MTUNBd0VBQWFOVE1GRXdIUVlEClZSME9CQllFRkhLZU5lRzV6TDdtZVJLOXZ5cjB6a3R6Mkh1c01COEdBMVVkSXdRWU1CYUFGSEtlTmVHNXpMN20KZVJLOXZ5cjB6a3R6Mkh1c01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQgpBSm1teHZKaTU2TTE0N0pMSWJ6WEl3eEp0bHJ4WDJ6cFJUTEdXN3lXdnNPMHFIR1AyczU3eWNkcm8wUEdVbWk3CjBhTU5Ub05nZXBZdHAvY3BadXNhbnZnWUxSeGk3OW9LbVlEajNXTURQOThwV3BmV1pVWG9TaXlsNXRRSWNXRnUKQ2F1ZnVwbUYvR3loS1hGdGlHQWZNV0ZsUlY0ZloyNnA5NFNOUVJMTEFLWThJU3RjeHdSeXhiMU91M0ZHT21ZbApRRzRMcVRxd1hwTWFhUHRuRkJhL0EvakFoT1lwNjM1Mkd6a1VPcHAyTTBpWVlZUm8zVXFLZUpIOTFjODZmZFBlCjQzUEp5cjNpSVFJaW9kRTVnaGhmaVV4a3ZDNWZsVnIvZXNBQ2JGMURSSkJoMHh6eGplQkg0bzdRNWZrSUJaeVQKK21uc3R5enp3NURpQ1FWSVJ2dkNYdysrcG4zbEExUis5NFhmbW1JMFZCcThtMmxmbUxqT1RydUVCUjBUL2lRTgpWM00zc3dxTUFGYVRLRnFpQi8zZXo5MEk5YUpleWNUdlFIK2VGQ2l1emdMenhjWll5MDhrSkMydC9qVVBmQ0xwCjZHTG9RSDlRNFM5dmJGSHJHaUxiYUd4bStDYzcxckpUQWJjVDFNVFdMSUdjc0xXQ05OTmJlZVlvS25yaGdkNDkKaXBvZjVlQlVFeEtBUHFmVzE5VVYvVmRXWFZwa2FWMnpEeFhwZzRxbHNlZjErak1jbGZGbVhOaXB4aEwvWG9wVgpwNm9Leklra1MvdnhjbUZLYlMvaGJ2Qzd3Y25UWmlvZ2dHRHUrT3o4Nk1qM3FCNXhCMTZsZVVmZGdPQVlORTdlCmQ5SklLNmpUYWs0bjV4ODZaZjkrQlRCNEcvdHBaZzRZaVN3Z0s4S2JOTlgzCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRRFp6WEE5ekFZbjJBMFgKem0yV0hjMVMvVS9SbVU0L21jdmoySU9XVGpYL2wrbnpWZGs2c21MU3VFNDRDS0xyVXhodnN6d09BWDk3cUt0OAo0SDNpZEt0VW96dzM1MkRmQXd5OFFoQm1PY0VwYmdqdVJ1U1J2OG56NURpRnNnVFp5QVZ6MTRvdmF6aHl4OGtYCmxYeFNiWE82OUpjRFhWYk8rb2didytSTjNxMjhUa3A1VmNkTVNMTzVmeFZqZ1BpS1UySnNZaFdIeFVhRVM4bUQKTHUvbDVMU2dZZVU0czlzazR0VGJCNzZ3RkdQSHpKV28zaFlhNGgzRUxWeVFtN2d6VTNhbFdIYmJtUkMyQjFobwpYblBuVG1NaEpaTkp5VW0vVEgyYlM4L3VjM0VoNDBLdTlLRko0dTEvdDlrR24vcVBINWpZNjVrcDVROE1seVBWCmRxVkNzd21Mb21JVUx3Qkc3SmVpeEYyT0RKVWhNSlFJVk5JWk0yWG5hOFpjaDE3ZE1Fb3psSDQvN3ZPV014bGgKWDBvdllXYldNZVNSUEJnKzZjR0lkaHZ3WnJtdVlyN2FybXh1S2s5TjdsT3pXbHc2WWl3YTFGQ3dRZExnRlJEegprdTRIaG1rZEY0dWJ0ZWpFWjVGazUyZTZaem51WS9ydDV0WmVZamJrYlZlNk9ac2xkRVk4dTVpa0VwSTd2ajR6ClZxVk5uZGV4ODV1Q1IxbnNMNTdaeFNtUHByUVhGU1VpUm1icUVEZTlKNTIzSC9rMXpYYzN2UjFxcjRHbHBVZk4KbjJJM1I2Q1YrZUxEZll3c1V1RTZ1bVozR2IwdlYwdk8rZlpLbEdVWmxPOVdXd1lCK1hNcjNxYnUybmlmbkhXQQp2dFc1VW9SMWRxNnJpL3R0b2dydFA0amhpck9nc3dJREFRQUJBb0lDQUdYSm9QOEFicEFJWkhZUHZ4ODg1a3cyCm5pcnlYcU5TbVBydW9QQ0p0S3F5c0Y5TWE2MEcyVEJwZWdTdDVKWGR5N25JSmZUVnRtSndQVlNyQmFuanBINTEKbXhyMVEweDEvR211NWtNZ0VxbnVCclowNHpWS1VITnU0UXQ2V3RIOHJLK3F0Nlhaa2hQeVVvUjNGQmJobUFoegpibS9nRzBXM3lBeFJ6RXlvR01HOFJRblhrTUNSNll4elcrZVl5bzY2MFhDZGxqcFJjOWM0SkFEdTJxYXg3OGhVCmQrKzcvbHFLdDdkMU15VFBJcUtwZGZmcGNxTTFzWHVSUjRVOWdTUmJpVU5VeUpkd1BXTVVvN2lEQzkrNXZwSXIKSVY2R2Q3U3packJCQ2ZnQ2M0akcwTTg2L0hXdlhCY29NSURzR3dqd1YxcHBJTGQzbVVUbERaWWhVTEtQUVpIbgpjdnV0ZzRrYTdpcmwwTFp6Zk9uc3dhWkNMNFZ3b1ZuVEVoSFVKL1M0eTRYUU1hMUVVekVJVVBJOEh0RWY0NVhuCnhKY3ZGQ1lqUS8xUDBlRTM0N0tWZ0hNblNPeWJaOHdjTjAxVHljSDk4NWovdEt0QlpySGVqWnY1WW93bDNCYlEKdCtFQXU5Qm95dVFYaHZRZGRUWUtSMjJ1TlZ3bnhDTVE3VTNnM3pIRTNzNStDbC85V0JTS0FzZjhuaTZjMXlEbwp2aXU2UW5VTXgwZ0V2eDIxQ0tYekV0WXAvYy9sM3lMcVVRQ2FBVlRNdzhhampCTFB0YUxtY3Qxc1FnUkxhZnQrCk9WYmJLMk5IaHRxS05HWU9KdTdEKzA5RzZTSUpVODVRL0o0UUcxSzFBYVhNNTVxRjR5NkFqUUVCQVlUeWx4a2oKSysrV01PeUlKaTE3YUwrVlo0RUJBb0lCQVFEMm1vUnc0bEJZNlBscFpWWS9jQUpVWXRDMndRRExzTVhDcUVNdwpSNVRwN2NlNFhSS0VNMFZVODRYbmdGOXdKTDcyQjREWFFBMW8zc2hXcDJHMXZ4c01GenNTajIyNW5uTVZWc3dJCktVeWFVWVlRQjFoQlE3cUl3WWJCelZGN3Y1OTRFN1RpR1R6QjZUTHloWWhIUUZLQ0hDbVI0WkxjbWJwMHA4cVAKQzBIejl6enFJVEhCS3ZKSEFBVmFzVlU3d2MyRmltdzRNaSsrdjlLWFByWW83Y3d5aW1EUGtpVERiaUpOV0dEYwppY1BxMkt4aEhYWmErRkl6T2xUV1Z3OVVYaWowNi9Vb29IZEZkVlA4UjFYVm5zYVJjK2ZncFpkc3JqczB6NUJPCm5aTWVZdnljMG5GbGVyY2UxeGF6QTVIRTFjTFd4cVJWcUNGYkR2R0xlVmliTWtSVEFvSUJBUURpR2Z0MkNvUTIKdmtzS0tnZ1hFbHBCNW9CdjJNdm9lRXVtUnRBOGJmZkxVdWVJV1lBbDZHeTQwZEZVSTdSV1VsTU5QSVo3MGFGWAo0T2drOGZVbWJFTVdraWRaMU9EWHcwZmZ2eEo5eFRnQllTalpiNW11ZjBXWnNDQi9LVXBxZXZxb1JiUWpHNlgzClZ6N082VURWQ2lFVjRXQUVqb2tscUU2YkNYc2g2Um02ei9VY3lQQzdkQzB5Y1VoZVF6OVdUV2tnNEdjeTJBbFkKSUs5SVZrakJzUkllRTNrOXNZeXFrNUhoWEFPT3JZcHcrV05ZWGNoTTE4NVFFY2txcklqbE1zbkRGOXpXYkZhMgpWOHBoMnFmeXU4WGNVNlZxd1hhRkM0Ny9jWWJBdkljeFNQOStLbXM1S2tWbmpvM0ZEZnZyLzNFY0NTdk4xM0FLCnlBd2pyU1lPQ2FZaEFvSUJBUUNycmF6UVRhMzBCOVZDKzZxTXBYVHB2SlZpOVlDUlRiS1Byc1ovd1FXNXliRUYKOTcyaFRYUlNET3RHM0ljVXNuQkRKYndibmxyM2pFbGFrbEtpemJXTnVFcUd4RlYyS1FvamEvYkZJOE5SbDduRwpST2E3SU9TbXVsd1BaZG41VmRFMkxqbjZRZW1iY2JiblFmRTY4VnUvZXMyeDRxRjBkSTFyRXprZ1ZvMEd4RE9qCko1TFUwUW8wUlo1MG9nb2RmUEdRcTJwbHdRS2VRRHJpMG1UTW42aE44eW9zdDZoaWFiVDF0YlpSTXBPelZqN0QKcVZneFFya3ZNc2ZISkhybW1GclpENy93RmE2VEszaFpwR3ZzT1FveVRzZTZERzRiMmp3YnF2amkwaTZPdEFqNwpRRUp6akhnWnYxSHROR254NTRNcU5NWkpYN0JCRFdrNVdUUkhienBEQW9JQkFEblRQVTJXS1BRN1BNUFB0aHY0CmRKN3dEWjhOU2pFZE92TytucGtsNHI3Y2FCeW1EekVpdlZPVFRiOEFGcW9SQ2U2VHNTMVBrcnovNXo4enBtZjYKUGpveWpOL2JvdGxydHlFUkkvQ0lsT2M5YXc0WkRhdmtIdS9NYkxNNDR6QlNYWExWeU5sRncrOTdIN1FaVVp4cQpwOFdKeTEyKytuSm9GaHB1bFZBNTVudXhuZFdMeW8yV2k4eWZ6a3RWVllpRDZjUWZ3Q1R2dll3TlorYlBNbkpmCkQrd2pQTm03WStkb01HSDdmMmxwRnNRSDlCRndncjZzWHJaNXBnSkUrQW51TUUyMTk2UGJOMTRSRzlCazlKa08KenU2bmNlSFlzckFhSWF0UTVJNjhhTE1CSVY2cUNKd3BKSEQwczJ0WFJUdTVLN3RvMlF3ZThpZS91K01QOEhDYwpwU0VDZ2dFQWZac3l6Y25ZTXhZamlKVGNLejFkbExhZUFYVXlDY2NyVmtoMzJERDlWeWZJSDlBT2lKRVBOV3FvCml6MnZ2Q2FtTzVsVjQ1ZGtBdjRJNkJPeHBWZVllaDNZWnZXbmpweCtjUWxxUG1uQW5VMm9ST2hxbXR0RkNCbHIKNmRhNjRsSW12VEpobGdIWW1IWWxHSnNTWlRubXR2UlhOUTVadkprMkJVYzNzVHBTSjc5YnVaeUdJeTBJYjdybQovYXhVb2l2M2ZSKzlVbzJ1eG5xSnc4dmEzRTJlRFRsVFpLOEMxMDllekhTRkZ2ZHVEdzhZN3FoMlRhVFBnUzhhCmsxbHUzTWdIb2laRnF3NXVldHdORlV4Vk9jTnFFZ0M3VlEvN3ljZkJBRzF4S0ErLzV1RzhvZTNKcTNiNVVHTFUKNXBtMHNVay9yTlFiMU4xNkltMWNUUDk0N2xQSEZBPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  creationTimestamp: null
  name: uploader-app-tls
type: kubernetes.io/tls
---
# Source: devops-test/templates/secrets.yaml
apiVersion: v1
data:
  
  AUTH_PART_MONGO: YWRtaW4=
  MONGO_INITDB_DATABASE: dXBsb2FkZXI=
  MONGO_INITDB_ROOT_PASSWORD: YWljMVV5b2g0dnVhMWll
  MONGO_INITDB_ROOT_USERNAME: cm9vdA==
kind: Secret
metadata:
  creationTimestamp: null
  name: mongo-secret
  namespace: polo
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: devops-chart-ingress-nginx-controller
  namespace: polo
data:
---
# Source: devops-test/charts/mongo/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-claim
  namespace: polo
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: standard
  resources:
    requests:
      storage: 1Gi
  storageClassName: mongo-pv
---
# Source: devops-test/charts/uploader-app/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-claim
  namespace: polo
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: standard
  resources:
    requests:
      storage: 5Gi
  storageClassName: uploader-pv
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
  name: devops-chart-ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
  name: devops-chart-ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: devops-chart-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: devops-chart-ingress-nginx
    namespace: "polo"
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: devops-chart-ingress-nginx
  namespace: polo
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: devops-chart-ingress-nginx
  namespace: polo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: devops-chart-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: devops-chart-ingress-nginx
    namespace: "polo"
---
# Source: devops-test/charts/mongo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: polo

spec:
  type: ClusterIP
  ports:
  - targetPort: 27017
    port: 27017
  selector:
    app: mongodb
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/controller-service-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: devops-chart-ingress-nginx-controller-admission
  namespace: polo
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: webhook
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/component: controller
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: devops-chart-ingress-nginx-controller
  namespace: polo
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/component: controller
---
# Source: devops-test/charts/uploader-app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: uploader-app
  namespace: polo
spec:
  selector:
    app: uploader-app
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: devops-chart-ingress-nginx-controller
  namespace: polo
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: devops-chart
      app.kubernetes.io/component: controller
  replicas: 1
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: devops-chart
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          image: "k8s.gcr.io/ingress-nginx/controller:v0.47.0@sha256:a1e4efc107be0bb78f32eaec37bef17d7a0c81bec8066cdf2572508d21351d0b"
          imagePullPolicy: IfNotPresent
          lifecycle: 
            preStop:
              exec:
                command:
                - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --publish-service=$(POD_NAMESPACE)/devops-chart-ingress-nginx-controller
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap=$(POD_NAMESPACE)/devops-chart-ingress-nginx-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe: 
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: webhook
              containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: webhook-cert
              mountPath: /usr/local/certificates/
              readOnly: true
          resources: 
            requests:
              cpu: 100m
              memory: 90Mi
      nodeSelector: 
        kubernetes.io/os: linux
      serviceAccountName: devops-chart-ingress-nginx
      terminationGracePeriodSeconds: 300
      volumes:
        - name: webhook-cert
          secret:
            secretName: devops-chart-ingress-nginx-admission
---
# Source: devops-test/charts/uploader-app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment

metadata:
  name: uploader-app
  labels:
    app: uploader
  namespace: polo  #  polo
spec:
  replicas: 1  #  1
  selector:
    matchLabels:
      app: uploader-app
  strategy: {}
  template:
    metadata:
      labels:
        app: uploader-app
    spec:
      containers:
      - image: "paulb314/uploader-app:latest"
        name: uploader-app
        command: ["yarn"]
        args: ["start-prod"]
        ports:
          - containerPort: 3000
        resources:
          limits:
            cpu: 0.5
            memory: 300Mi
          requests:
            cpu: 0.5
            memory: 300Mi
        volumeMounts:
          - name: uploaded
            mountPath: /usr/app/src/uploaded
        envFrom:
        - secretRef:
            name: mongo-secret
      volumes:
      - name: uploaded
        persistentVolumeClaim:
          claimName: uploads-claim
---
# Source: devops-test/charts/mongo/templates/stateful-set.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  labels:
    app: mongodb
  namespace: polo
spec:
  selector:
    matchLabels:
      app: mongodb # has to match .spec.template.metadata.labels
  serviceName: mongodb
  replicas: 1
  updateStrategy:
        type: RollingUpdate
  template:
    metadata:
      labels:
        app: mongodb # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: mongodb
        image: "mongo:4.4.0"
        resources:
          limits:
            cpu: 1
            memory: 300Mi
          requests:
            cpu: 1
            memory: 300Mi
        envFrom:
        - secretRef:
            name: mongo-secret
        ports:
        - containerPort: 27017
          name: mongo
        volumeMounts:
          - name: data
            mountPath: "/data/db"
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: mongo-claim
---
# Source: devops-test/charts/uploader-app/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-uploader-app
  namespace: polo
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/secure-backends: "false"
spec:
  rules:
  - host: uploader-app.polo.localhost
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: uploader-app
            port: 
              number: 3000
---
# Source: devops-test/charts/uploader-app/charts/ingress-nginx/templates/admission-webhooks/validating-webhook.yaml
# before changing this value, check the required kubernetes version
# https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.34.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: devops-chart
    app.kubernetes.io/version: "0.47.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  name: devops-chart-ingress-nginx-admission
webhooks:
  - name: validate.nginx.ingress.kubernetes.io
    matchPolicy: Equivalent
    rules:
      - apiGroups:
          - networking.k8s.io
        apiVersions:
          - v1beta1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ingresses
    failurePolicy: Fail
    sideEffects: None
    admissionReviewVersions:
      - v1
      - v1beta1
    clientConfig:
      service:
        namespace: "polo"
        name: devops-chart-ingress-nginx-controller-admission
        path: /networking/v1beta1/ingresses

